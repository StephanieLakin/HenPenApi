// <auto-generated />
using System;
using HenPenApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HenPenApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230516164321_updatebreeds")]
    partial class updatebreeds
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HenPenApi.Models.Breed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Characteristics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Climate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EggColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Breeds");
                });

            modelBuilder.Entity("HenPenApi.Models.Consumption", b =>
                {
                    b.Property<int>("ConsumptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsumptionId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeedId")
                        .HasColumnType("int");

                    b.Property<int>("HenId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ConsumptionId");

                    b.HasIndex("FeedId");

                    b.HasIndex("HenId");

                    b.ToTable("Consumptions");
                });

            modelBuilder.Entity("HenPenApi.Models.EggProduction", b =>
                {
                    b.Property<int>("EggProductionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EggProductionId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EggsCollected")
                        .HasColumnType("int");

                    b.Property<int>("HenId")
                        .HasColumnType("int");

                    b.HasKey("EggProductionId");

                    b.HasIndex("HenId");

                    b.ToTable("Eggs");
                });

            modelBuilder.Entity("HenPenApi.Models.Feed", b =>
                {
                    b.Property<int>("FeedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedId"));

                    b.Property<string>("FeedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FeedId");

                    b.ToTable("Feeds");
                });

            modelBuilder.Entity("HenPenApi.Models.HealthIssue", b =>
                {
                    b.Property<int>("HealthIssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HealthIssueId"));

                    b.Property<string>("HandlingDirections")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthIssueName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecommendedMedications")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HealthIssueId");

                    b.ToTable("HealthIssues");
                });

            modelBuilder.Entity("HenPenApi.Models.Hen", b =>
                {
                    b.Property<int>("HenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HenId"));

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("BreedId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EggColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasHealthIssue")
                        .HasColumnType("bit");

                    b.Property<int>("HealthIssueId")
                        .HasColumnType("int");

                    b.Property<string>("HenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<int>("WklyEggAvg")
                        .HasColumnType("int");

                    b.HasKey("HenId");

                    b.HasIndex("BreedId");

                    b.HasIndex("HealthIssueId");

                    b.ToTable("Hens");
                });

            modelBuilder.Entity("HenPenApi.Models.Consumption", b =>
                {
                    b.HasOne("HenPenApi.Models.Feed", "Feed")
                        .WithMany()
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HenPenApi.Models.Hen", "Hen")
                        .WithMany()
                        .HasForeignKey("HenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feed");

                    b.Navigation("Hen");
                });

            modelBuilder.Entity("HenPenApi.Models.EggProduction", b =>
                {
                    b.HasOne("HenPenApi.Models.Hen", "Hen")
                        .WithMany()
                        .HasForeignKey("HenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hen");
                });

            modelBuilder.Entity("HenPenApi.Models.Hen", b =>
                {
                    b.HasOne("HenPenApi.Models.Breed", null)
                        .WithMany("Hens")
                        .HasForeignKey("BreedId");

                    b.HasOne("HenPenApi.Models.HealthIssue", "HealthIssue")
                        .WithMany()
                        .HasForeignKey("HealthIssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthIssue");
                });

            modelBuilder.Entity("HenPenApi.Models.Breed", b =>
                {
                    b.Navigation("Hens");
                });
#pragma warning restore 612, 618
        }
    }
}
